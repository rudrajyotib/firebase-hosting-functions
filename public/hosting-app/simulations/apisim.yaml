simlet: hello-world

response:
  from: stub
  body: 
    file: "${simlet.path}/default.json"

---
simlet: greetings

request:
- method: GET
- uriPathPattern: /greetings/{name}

Name:
  is: parameter
  from: uriPathPattern
  pattern: /greetings/{name}

response:
  from: template
  body: "Greetings, ${ Name }!"

---
simlet: hi

request:
- method: GET
- uriPath: /hi

Name:
  is: parameter
  from: uriQueryParameter
  named: name

Place:
  is: parameter
  from: uriQueryParameter
  named: place

response:
  from: template
  body: "Hi, ${ Name && Name.first() ? Name.first() : 'Stranger' } from ${ Place && Place.first() ? Place.first() : 'Nowhere' }!"

---

simlet: query-active-exams

request:
- method: GET
- uriPath: /exams/active

StudentId:
  is: parameter
  from: uriQueryParameter
  named: studentId

response:
  from: stub
  
  # If not configured the status will be defaulted to 200 
  status: 200
  
  headers:
  - "Content-Type: application/json;"
  
  # When the body uses the default UTF-8 charset, the body
  # content can be specified directly as a value like this:
  body: 
    file: "${simlet.path}/active-exam-list.json"

---

simlet: start-active-exams

request:
- method: POST
- uriPath: /exams/start

javascriptExecutor:
  is: scriptExecutor
  lang: javascript
  libs:
  - "${sim.path}"

ExamInstanceIdFromBody:
  is: parameter
  from: body
  element: ".examInstanceId"

VerificationScript:
  is: script
  executor: javascriptExecutor
  expression: "startExam('ExamInstanceIdFromBody')"

VerfiiedData:
  is: parameter 
  from: script
  script: "VerificationScript"


response:
  from: template
  template: Simula

  status: 200

  headers:
   - "Content-Type: application/json;"

  body: `
    ${VerfiiedData}
  `
---

simlet: submit-answer

request:
- method: POST
- uriPath: /exams/answer

javascriptExecutor:
  is: scriptExecutor
  lang: javascript
  libs:
  - "${sim.path}"

NameFromBody:
  is: parameter
  from: body
  element: ".questionId"

QuestionIndexFromBody:
  is: parameter
  from: body
  element: ".questionIndex"

VerificationScript:
  is: script
  executor: javascriptExecutor
  expression: "acceptAnswerSubmissionHappyPathOnly('NameFromBody','QuestionIndexFromBody')"

VerfiiedData:
  is: parameter 
  from: script
  script: "VerificationScript"

response:
  from: template
  template: Simula

  status: 200

  headers:
   - "Content-Type: application/json;"

  body: `
    ${VerfiiedData}
  `
    
---

simlet: query-user-by-name

request:
- method: GET
- uriPath: /user/userByName

javascriptExecutor:
  is: scriptExecutor
  lang: javascript
  libs:
  - "${sim.path}"

UserName:
  is: parameter
  from: uriQueryParameter
  named: userName

VerificationScript:
  is: script
  executor: javascriptExecutor
  expression: "userDetails('UserName')"

VerfiiedData:
  is: parameter 
  from: script
  script: "VerificationScript"

response:
  from: template
  template: Simula

  status: 200

  headers:
   - "Content-Type: application/json;"

  body: `
    ${VerfiiedData}
  `
    

---

simlet: evaluate

request:
- method: POST
- uriPath: /exams/evaluate

javascriptExecutor:
  is: scriptExecutor
  lang: javascript
  libs:
  - "${sim.path}"

VerificationScript:
  is: script
  executor: javascriptExecutor
  expression: "evaluate()"

VerfiiedData:
  is: parameter 
  from: script
  script: "VerificationScript"

response:
  from: template
  template: Simula

  status: 200

  headers:
   - "Content-Type: application/json;"

  body: `
    ${VerfiiedData}
  `
    
---

simlet: get-list-of-subjects

request:
- method: GET
- uriPath: /org/subjects

javascriptExecutor:
  is: scriptExecutor
  lang: javascript
  libs:
  - "${sim.path}"

OrganisationId:
  is: parameter
  from: uriQueryParameter
  named: orgId

VerificationScript:
  is: script
  executor: javascriptExecutor
  expression: "listOfSubjectAndTopics()"

VerfiiedData:
  is: parameter 
  from: script
  script: "VerificationScript"


response:
  from: template
  template: Simula

  status: 200

  headers:
   - "Content-Type: application/json;"

  body: `
    ${VerfiiedData}
  `
---